// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
	//Not gates for sel
	Not(in=sel[0], out=notSel0);
	Not(in=sel[1], out=notSel1);
	Not(in=sel[2], out=notSel2);

	//Basic Selection Pins
	And(a=notSel0, b=notSel1, out=notSel0AndnotSel1);
	And(a=sel[0], b=notSel1, out=Sel0AndnotSel1);
	And(a=notSel0, b=sel[1], out=notSel0AndSel1);
	And(a=sel[0], b=sel[1], out=Sel0AndSel1);

	//Selection Pins
	And(a=notSel0AndnotSel1, b=notSel2, out=PinA);
	And(a=Sel0AndnotSel1, b=notSel2, out=PinB);
	And(a=notSel0AndSel1, b=notSel2, out=PinC);
	And(a=Sel0AndSel1, b=notSel2, out=PinD);
	And(a=notSel0AndnotSel1, b=sel[2], out=PinE);
	And(a=Sel0AndnotSel1, b=sel[2], out=PinF);
	And(a=notSel0AndSel1, b=sel[2], out=PinG);
	And(a=Sel0AndSel1, b=sel[2], out=PinH);

	//selA Comparisons
	And(a=a[0], b=PinA, out=selA0);
	And(a=a[1], b=PinA, out=selA1);
	And(a=a[2], b=PinA, out=selA2);
	And(a=a[3], b=PinA, out=selA3);
	And(a=a[4], b=PinA, out=selA4);
	And(a=a[5], b=PinA, out=selA5);
	And(a=a[6], b=PinA, out=selA6);
	And(a=a[7], b=PinA, out=selA7);
	And(a=a[8], b=PinA, out=selA8);
	And(a=a[9], b=PinA, out=selA9);
	And(a=a[10], b=PinA, out=selA10);
	And(a=a[11], b=PinA, out=selA11);
	And(a=a[12], b=PinA, out=selA12);
	And(a=a[13], b=PinA, out=selA13);
	And(a=a[14], b=PinA, out=selA14);
	And(a=a[15], b=PinA, out=selA15);

	//selB comparisons
	And(a=b[0], b=PinB, out=selB0);
	And(a=b[1], b=PinB, out=selB1);
	And(a=b[2], b=PinB, out=selB2);
	And(a=b[3], b=PinB, out=selB3);
	And(a=b[4], b=PinB, out=selB4);
	And(a=b[5], b=PinB, out=selB5);
	And(a=b[6], b=PinB, out=selB6);
	And(a=b[7], b=PinB, out=selB7);
	And(a=b[8], b=PinB, out=selB8);
	And(a=b[9], b=PinB, out=selB9);
	And(a=b[10], b=PinB, out=selB10);
	And(a=b[11], b=PinB, out=selB11);
	And(a=b[12], b=PinB, out=selB12);
	And(a=b[13], b=PinB, out=selB13);
	And(a=b[14], b=PinB, out=selB14);
	And(a=b[15], b=PinB, out=selB15);

	//selC comparisons
And(a=c[0], b=PinC, out=selC0);
And(a=c[1], b=PinC, out=selC1);
And(a=c[2], b=PinC, out=selC2);
And(a=c[3], b=PinC, out=selC3);
And(a=c[4], b=PinC, out=selC4);
And(a=c[5], b=PinC, out=selC5);
And(a=c[6], b=PinC, out=selC6);
And(a=c[7], b=PinC, out=selC7);
And(a=c[8], b=PinC, out=selC8);
And(a=c[9], b=PinC, out=selC9);
And(a=c[10], b=PinC, out=selC10);
And(a=c[11], b=PinC, out=selC11);
And(a=c[12], b=PinC, out=selC12);
And(a=c[13], b=PinC, out=selC13);
And(a=c[14], b=PinC, out=selC14);
And(a=c[15], b=PinC, out=selC15);

	//selD comparisons
And(a=d[0], b=PinD, out=selD0);
And(a=d[1], b=PinD, out=selD1);
And(a=d[2], b=PinD, out=selD2);
And(a=d[3], b=PinD, out=selD3);
And(a=d[4], b=PinD, out=selD4);
And(a=d[5], b=PinD, out=selD5);
And(a=d[6], b=PinD, out=selD6);
And(a=d[7], b=PinD, out=selD7);
And(a=d[8], b=PinD, out=selD8);
And(a=d[9], b=PinD, out=selD9);
And(a=d[10], b=PinD, out=selD10);
And(a=d[11], b=PinD, out=selD11);
And(a=d[12], b=PinD, out=selD12);
And(a=d[13], b=PinD, out=selD13);
And(a=d[14], b=PinD, out=selD14);
And(a=d[15], b=PinD, out=selD15);

	//selE comparisons
And(a=e[0], b=PinE, out=selE0);
And(a=e[1], b=PinE, out=selE1);
And(a=e[2], b=PinE, out=selE2);
And(a=e[3], b=PinE, out=selE3);
And(a=e[4], b=PinE, out=selE4);
And(a=e[5], b=PinE, out=selE5);
And(a=e[6], b=PinE, out=selE6);
And(a=e[7], b=PinE, out=selE7);
And(a=e[8], b=PinE, out=selE8);
And(a=e[9], b=PinE, out=selE9);
And(a=e[10], b=PinE, out=selE10);
And(a=e[11], b=PinE, out=selE11);
And(a=e[12], b=PinE, out=selE12);
And(a=e[13], b=PinE, out=selE13);
And(a=e[14], b=PinE, out=selE14);
And(a=e[15], b=PinE, out=selE15);

	//selF comparisons
And(a=f[0], b=PinF, out=selF0);
And(a=f[1], b=PinF, out=selF1);
And(a=f[2], b=PinF, out=selF2);
And(a=f[3], b=PinF, out=selF3);
And(a=f[4], b=PinF, out=selF4);
And(a=f[5], b=PinF, out=selF5);
And(a=f[6], b=PinF, out=selF6);
And(a=f[7], b=PinF, out=selF7);
And(a=f[8], b=PinF, out=selF8);
And(a=f[9], b=PinF, out=selF9);
And(a=f[10], b=PinF, out=selF10);
And(a=f[11], b=PinF, out=selF11);
And(a=f[12], b=PinF, out=selF12);
And(a=f[13], b=PinF, out=selF13);
And(a=f[14], b=PinF, out=selF14);
And(a=f[15], b=PinF, out=selF15);

	//selG comparisons
And(a=g[0], b=PinG, out=selG0);
And(a=g[1], b=PinG, out=selG1);
And(a=g[2], b=PinG, out=selG2);
And(a=g[3], b=PinG, out=selG3);
And(a=g[4], b=PinG, out=selG4);
And(a=g[5], b=PinG, out=selG5);
And(a=g[6], b=PinG, out=selG6);
And(a=g[7], b=PinG, out=selG7);
And(a=g[8], b=PinG, out=selG8);
And(a=g[9], b=PinG, out=selG9);
And(a=g[10], b=PinG, out=selG10);
And(a=g[11], b=PinG, out=selG11);
And(a=g[12], b=PinG, out=selG12);
And(a=g[13], b=PinG, out=selG13);
And(a=g[14], b=PinG, out=selG14);
And(a=g[15], b=PinG, out=selG15);

	//selH comparisons
And(a=h[0], b=PinH, out=selH0);
And(a=h[1], b=PinH, out=selH1);
And(a=h[2], b=PinH, out=selH2);
And(a=h[3], b=PinH, out=selH3);
And(a=h[4], b=PinH, out=selH4);
And(a=h[5], b=PinH, out=selH5);
And(a=h[6], b=PinH, out=selH6);
And(a=h[7], b=PinH, out=selH7);
And(a=h[8], b=PinH, out=selH8);
And(a=h[9], b=PinH, out=selH9);
And(a=h[10], b=PinH, out=selH10);
And(a=h[11], b=PinH, out=selH11);
And(a=h[12], b=PinH, out=selH12);
And(a=h[13], b=PinH, out=selH13);
And(a=h[14], b=PinH, out=selH14);
And(a=h[15], b=PinH, out=selH15);

	//aOrb comparisons
Or(a=selA0, b=selB0, out=aOrb0);
Or(a=selA1, b=selB1, out=aOrb1);
Or(a=selA2, b=selB2, out=aOrb2);
Or(a=selA3, b=selB3, out=aOrb3);
Or(a=selA4, b=selB4, out=aOrb4);
Or(a=selA5, b=selB5, out=aOrb5);
Or(a=selA6, b=selB6, out=aOrb6);
Or(a=selA7, b=selB7, out=aOrb7);
Or(a=selA8, b=selB8, out=aOrb8);
Or(a=selA9, b=selB9, out=aOrb9);
Or(a=selA10, b=selB10, out=aOrb10);
Or(a=selA11, b=selB11, out=aOrb11);
Or(a=selA12, b=selB12, out=aOrb12);
Or(a=selA13, b=selB13, out=aOrb13);
Or(a=selA14, b=selB14, out=aOrb14);
Or(a=selA15, b=selB15, out=aOrb15);

	//cOrd comparisons
Or(a=selC0, b=selD0, out=cOrd0);
Or(a=selC1, b=selD1, out=cOrd1);
Or(a=selC2, b=selD2, out=cOrd2);
Or(a=selC3, b=selD3, out=cOrd3);
Or(a=selC4, b=selD4, out=cOrd4);
Or(a=selC5, b=selD5, out=cOrd5);
Or(a=selC6, b=selD6, out=cOrd6);
Or(a=selC7, b=selD7, out=cOrd7);
Or(a=selC8, b=selD8, out=cOrd8);
Or(a=selC9, b=selD9, out=cOrd9);
Or(a=selC10, b=selD10, out=cOrd10);
Or(a=selC11, b=selD11, out=cOrd11);
Or(a=selC12, b=selD12, out=cOrd12);
Or(a=selC13, b=selD13, out=cOrd13);
Or(a=selC14, b=selD14, out=cOrd14);
Or(a=selC15, b=selD15, out=cOrd15);

	//eOrf comparisons
Or(a=selE0, b=selF0, out=eOrf0);
Or(a=selE1, b=selF1, out=eOrf1);
Or(a=selE2, b=selF2, out=eOrf2);
Or(a=selE3, b=selF3, out=eOrf3);
Or(a=selE4, b=selF4, out=eOrf4);
Or(a=selE5, b=selF5, out=eOrf5);
Or(a=selE6, b=selF6, out=eOrf6);
Or(a=selE7, b=selF7, out=eOrf7);
Or(a=selE8, b=selF8, out=eOrf8);
Or(a=selE9, b=selF9, out=eOrf9);
Or(a=selE10, b=selF10, out=eOrf10);
Or(a=selE11, b=selF11, out=eOrf11);
Or(a=selE12, b=selF12, out=eOrf12);
Or(a=selE13, b=selF13, out=eOrf13);
Or(a=selE14, b=selF14, out=eOrf14);
Or(a=selE15, b=selF15, out=eOrf15);

	//gOrh comparisons
Or(a=selG0, b=selH0, out=gOrh0);
Or(a=selG1, b=selH1, out=gOrh1);
Or(a=selG2, b=selH2, out=gOrh2);
Or(a=selG3, b=selH3, out=gOrh3);
Or(a=selG4, b=selH4, out=gOrh4);
Or(a=selG5, b=selH5, out=gOrh5);
Or(a=selG6, b=selH6, out=gOrh6);
Or(a=selG7, b=selH7, out=gOrh7);
Or(a=selG8, b=selH8, out=gOrh8);
Or(a=selG9, b=selH9, out=gOrh9);
Or(a=selG10, b=selH10, out=gOrh10);
Or(a=selG11, b=selH11, out=gOrh11);
Or(a=selG12, b=selH12, out=gOrh12);
Or(a=selG13, b=selH13, out=gOrh13);
Or(a=selG14, b=selH14, out=gOrh14);
Or(a=selG15, b=selH15, out=gOrh15);

	//PinOne comparisons
Or(a=aOrb0, b=cOrd0, out=PinOne0);
Or(a=aOrb1, b=cOrd1, out=PinOne1);
Or(a=aOrb2, b=cOrd2, out=PinOne2);
Or(a=aOrb3, b=cOrd3, out=PinOne3);
Or(a=aOrb4, b=cOrd4, out=PinOne4);
Or(a=aOrb5, b=cOrd5, out=PinOne5);
Or(a=aOrb6, b=cOrd6, out=PinOne6);
Or(a=aOrb7, b=cOrd7, out=PinOne7);
Or(a=aOrb8, b=cOrd8, out=PinOne8);
Or(a=aOrb9, b=cOrd9, out=PinOne9);
Or(a=aOrb10, b=cOrd10, out=PinOne10);
Or(a=aOrb11, b=cOrd11, out=PinOne11);
Or(a=aOrb12, b=cOrd12, out=PinOne12);
Or(a=aOrb13, b=cOrd13, out=PinOne13);
Or(a=aOrb14, b=cOrd14, out=PinOne14);
Or(a=aOrb15, b=cOrd15, out=PinOne15);

	//PinTwo comparisons
Or(a=eOrf0, b=gOrh0, out=PinTwo0);
Or(a=eOrf1, b=gOrh1, out=PinTwo1);
Or(a=eOrf2, b=gOrh2, out=PinTwo2);
Or(a=eOrf3, b=gOrh3, out=PinTwo3);
Or(a=eOrf4, b=gOrh4, out=PinTwo4);
Or(a=eOrf5, b=gOrh5, out=PinTwo5);
Or(a=eOrf6, b=gOrh6, out=PinTwo6);
Or(a=eOrf7, b=gOrh7, out=PinTwo7);
Or(a=eOrf8, b=gOrh8, out=PinTwo8);
Or(a=eOrf9, b=gOrh9, out=PinTwo9);
Or(a=eOrf10, b=gOrh10, out=PinTwo10);
Or(a=eOrf11, b=gOrh11, out=PinTwo11);
Or(a=eOrf12, b=gOrh12, out=PinTwo12);
Or(a=eOrf13, b=gOrh13, out=PinTwo13);
Or(a=eOrf14, b=gOrh14, out=PinTwo14);
Or(a=eOrf15, b=gOrh15, out=PinTwo15);

	//out comparisons
Or(a=PinOne0, b=PinTwo0, out=out[0]);
Or(a=PinOne1, b=PinTwo1, out=out[1]);
Or(a=PinOne2, b=PinTwo2, out=out[2]);
Or(a=PinOne3, b=PinTwo3, out=out[3]);
Or(a=PinOne4, b=PinTwo4, out=out[4]);
Or(a=PinOne5, b=PinTwo5, out=out[5]);
Or(a=PinOne6, b=PinTwo6, out=out[6]);
Or(a=PinOne7, b=PinTwo7, out=out[7]);
Or(a=PinOne8, b=PinTwo8, out=out[8]);
Or(a=PinOne9, b=PinTwo9, out=out[9]);
Or(a=PinOne10, b=PinTwo10, out=out[10]);
Or(a=PinOne11, b=PinTwo11, out=out[11]);
Or(a=PinOne12, b=PinTwo12, out=out[12]);
Or(a=PinOne13, b=PinTwo13, out=out[13]);
Or(a=PinOne14, b=PinTwo14, out=out[14]);
Or(a=PinOne15, b=PinTwo15, out=out[15]);
}